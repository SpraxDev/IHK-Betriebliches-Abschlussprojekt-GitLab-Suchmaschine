generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model Repository {
  projectId      Int       @id @map("gitlab_project_id")
  displayName    String    @map("display_name")
  fullName       String    @map("full_name")
  defaultBranch  String    @map("default_branch")
  lastIndexedRef String?   @map("last_indexed_ref")
  lastIndexedAt  DateTime? @map("last_indexed_at")
  projectUrl     String    @map("project_url")
  avatarUrl      String?   @map("avatar_url")

  commits             Commit[]
  repositoryFiles     RepositoryFiles[]
  usersWithReadAccess User[]

  @@map("repositories")
}

model File {
  sha256    Bytes    @id
  createdAt DateTime @default(now()) @map("created_at")

  repositoryFiles RepositoryFiles[]
  fileChunks      FileChunks[]

  @@map("files")
}

model FileChunks {
  fileSha256 Bytes  @map("file_sha256")
  order      Int    @map("order")
  content    String @map("content")

  file File @relation(fields: [fileSha256], references: [sha256], onDelete: Cascade)

  @@id([fileSha256, order])
  @@index([content(ops: raw("gist_trgm_ops"))], type: Gist)
  @@map("file_chunks")
}

model RepositoryFiles {
  projectId  Int      @map("project_id")
  filePath   String   @map("file_path")
  fileName   String   @map("file_name")
  branch     String
  fileSha256 Bytes    @map("file_sha256")
  updatedAt  DateTime @updatedAt @map("updated_at")

  repository Repository @relation(fields: [projectId], references: [projectId])
  file       File       @relation(fields: [fileSha256], references: [sha256])

  @@id([projectId, filePath, branch])
  @@index([filePath(ops: raw("gist_trgm_ops"))], type: Gist)
  @@index([fileName(ops: raw("gist_trgm_ops"))], type: Gist)
  @@map("repository_files")
}

model Commit {
  projectId   Int    @map("project_id")
  gitObjectId String @map("git_object_id")
  message     String
  authorName  String @map("author_name")
  authorEmail String @map("author_email")
  diff        String

  repository Repository @relation(fields: [projectId], references: [projectId])

  @@id([projectId, gitObjectId])
  @@map("commits")
}

model User {
  userId Int @id @map("user_id")

  repositoriesWithReadAccess Repository[]

  @@map("users")
}

model Sessions {
  id      String   @id
  data    Json
  expires DateTime

  @@index([expires])
  @@map("sessions")
}
